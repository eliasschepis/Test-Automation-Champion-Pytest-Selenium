# üè∑Ô∏è Nombre del workflow (aparece en la pesta√±a Actions)
name: Run Selenium Pytest inside Docker

# üöÄ Cu√°ndo se ejecuta este workflow
on:
  push:         # Se ejecuta cuando haces push a cualquier rama
  pull_request: # Tambi√©n cuando se abre un pull request

# üß± Definimos los jobs que se ejecutar√°n
jobs:
  test:  # Nombre del job principal
    runs-on: ubuntu-latest  # Utiliza un runner de GitHub basado en Ubuntu

    steps:
      # 1Ô∏è‚É£ Descarga el c√≥digo fuente del repositorio en el runner
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Construye la imagen Docker definida en tu Dockerfile
      - name: Build Docker image
        run: docker build -t selenium-tests .

      # 3Ô∏è‚É£ Ejecuta los tests dentro del contenedor Docker
      - name: Run tests inside Docker
        run: |
          docker run --name selenium-runner selenium-tests || docker logs selenium-runner

      # 4Ô∏è‚É£ Copia la carpeta /app/reports desde el contenedor al runner de GitHub
      - name: Copy reports to host
        run: |
          docker cp selenium-runner:/app/reports ./reports

      # 5Ô∏è‚É£ Elimina el contenedor usado para liberar espacio
      - name: Clean up
        run: docker rm selenium-runner

      # 6Ô∏è‚É£ Sube los reportes generados como artefacto descargable en GitHub Actions
      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: test-report       # Nombre del artefacto
          path: ./reports         # Carpeta que queremos subir
